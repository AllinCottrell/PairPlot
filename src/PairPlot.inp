function scalar has_min_two_series (const list L)
    /*  */

    if nelem(L) < 2
        printf "\nError: List of variables must be comprise at least two series.\n"
        return FALSE
    endif

    return TRUE
end function


function void add_information_of_factor (const series factor, bundle *self)
    /*  Gather information of factor series. */

    series self.factor_series = factor

    matrix self.factor_values = values(factor)
    scalar self.n_factors = nelem(self.factor_values)

    bundle b = getinfo(factor)
    if b.has_string_table
        strings self.factor_str_values = strvals(factor)
    endif
end function


function string get_plot_type (const bundle self)
    /* Retrieve plot type. */

    string type = (self.use_circles == TRUE) ? "circles" : "points"

    return type
end function


function scalar PairPlot (const list L "List of variables to plot",
                          const series factor[null] "Discrete series for factorization",
                          bundle opts[null] "Set options through bundle")
    /* Main public function.
    return: TRUE on error, otherwise FALSE. */

    bundle self
    if exists(opts)
        self = opts
    endif
    self = self + default_options()

    # Some checks
    if nelem(self.filename) == 0
        printf "\nError: Invalid file name.\n"
        return TRUE
    endif
    if !has_min_two_series(L)
        return TRUE
    endif
    self.n_variables = nelem(L)

    # Handle eventual missing values
    list  ALL = L
    ALL += exists(factor) ? factor : null
    smpl ALL --no-missing

    # Set some global(s)
    string self.plot_type = get_plot_type(self)

    if exists(factor)
        add_information_of_factor(factor, &self)
    else
        scalar self.n_factors = 1
        matrix self.factor_values = {1}
    endif
    code = isok_length_pointtype_vector(self)
    if !code
        return TRUE
    endif

    self.filename = exists(filename) ? filename : self.filename
    add_filetype(&self)

    string buffer = write_settings(&self)
    string buffer += compile_gnuplot_cmd_data_buffer(L, self)

    return send_to_gnuplot(buffer, self.filename)
end function


function string type_to_function_map (const string type)
    /* Map type to function name. */

    map =_(\
            triangle = "write_plot_cmd_and_data_tri",\
            matrix = "write_plot_cmd_and_data_mat",\
            row = "write_plot_cmd_and_data_mat",\
            column = "write_plot_cmd_and_data_mat"\
          )

    return map["@type"]
end function

function string compile_gnuplot_cmd_data_buffer (const list L,
                                                 const bundle self)
    /*  Compile gnuplot commands and data buffer for plotting. */

    string funcname = type_to_function_map(self.type)

    return feval(funcname, L, self)
end function


function void GUI_PairPlot (const list L "List of variables to plot",
                            const series factor[null] "Discrete series for factorization",
                            int type[1:4:1] "Plot type" {"triangle", "matrix", "row", "column"})
    /* Helper function for GUI access. */
    bundle opts = null

    if type == 1
        string opts.type = "triangle"
    elif type == 2
        string opts.type = "matrix"
    elif type == 3
        string opts.type = "row"
    elif type == 4
        string opts.type = "column"
    endif
    if exists(factor)
        scalar err = PairPlot(L, factor,  opts)
    else
        scalar err = PairPlot(L, null, opts)
    endif
end function


function void add_filetype (bundle *self)
    /* Determine type for plot file. */

    if self.filename == "display"
        self.filetype = "png"
    else
        scalar length = strlen(self.filename)
        string s = substr(self.filename, (length - 4), length)
        string tmp = strstr(s, ".")
        string self.filetype = strsub(tmp, ".", "")
    endif
end function


function scalar isok_length_pointtype_vector (const bundle self)
    /* Make sure length of 'pointtype' vector is at least as long the number of distinct factor values.
    return: TRUE of length of 'pointtype' vector is at least as long the number of distinct factor values; otherwise FALSE*/

    if inbundle(self, "n_factors") && nelem(self.pointtype) < self.n_factors
        printf "\nError: 'factor' series has %d distinct values but you\n\
        have set a vector 'pointtype' with only %d elements. Abort.\n\n",\
            self.n_factors, nelem(self.pointtype)
        return FALSE
    endif

    return TRUE
end function



function scalar plottype_to_rows_map (const bundle self)
    /* Determine number of rows of multiplot depending on plot type. */

    map =_(\
            triangle = self.n_variables - 1,
            column = self.n_variables - 1,
            matrix = self.n_variables,
            row = 1\
          )

    return map[self.type]
end function


function scalar plottype_to_cols_map (const bundle self)
    /* Determine number of columns of multiplot depending on plot type. */

    if self.type != "column"
        return self.n_variables - 1
    else
        return 1
    endif
end function


function string write_settings (bundle *self)
    /* Write various settings to a string buffer. */

    string buffer
    buffer += sprintf("set terminal png size 1280, 480 font ',%d'\n", self.fontsize)

    buffer += write_linetype(self.n_variables * self.n_factors,
                             get_color_definitions(),
                             self.transparency_level)

    buffer += sprintf("set multiplot layout %d,%d\n",\
                      plottype_to_rows_map(self), plottype_to_cols_map(self))

    buffer += sprintf("set style line 101 lc rgb '#808080' lt 1 lw 1\n")
    # drop right and upper border
    buffer += sprintf("set border 3 front ls 101\n")
    buffer += write_options(self)

    return buffer
end function


function bundle default_options (void)
    /* Default parameter values. */

    bundle self = null

    scalar self.aspect_scale = 1.5	# scaling factor for size
    scalar self.fontsize = 12
    scalar self.pointsize = 0.5
    matrix self.pointtype = {7; 5; 6; 15; 13; 11; 8; 4; 1; 2; 14; 3; 9; 10; 12; 14}
    scalar self.offset_level = 0.02
    scalar self.with_key = 1	# print distinct values of factor variable
    string self.key_position = "top left"	# position of legend
    scalar self.key_fontsize = 8
    scalar self.use_circles = FALSE
    scalar self.tics_fontsize = 8
    scalar self.transparency_level = 0
    string self.type = "triangle"
    scalar self.tics = TRUE		 # print no x/y tics
    scalar self.grid = FALSE     # add grid (works only if self.tics=1) - not supported!
    string self.centroid = "none"
    scalar self.centroid_label = FALSE
    scalar self.centroid_pointsize = 3
    scalar self.centroid_linewidth = 3
    string self.filename = "display"
    scalar self.y_logscale = NA
    scalar self.x_logscale = NA

    return self
end function


function scalar send_to_gnuplot (const string buffer,
                                 const string filename)
    /* Write buffer to temp file and send to gnuplot */

    string mytemp
    outfile --tempfile=mytemp --quiet
        print buffer
    end outfile

    catch gnuplot --input="@mytemp" --output="@filename"

    return $error
end function


function string write_plot_cmd_and_data_mat (const list L,
                                             const bundle self)
    /* For case self.type=="matrix" case */

    string BUFFER = ""

    set force_decpoint on

    loop foreach y L -q         # Row dimension

        loop foreach x L -q     # Col dimension
            if varname(L.$y) != varname(L.$x)

                string buffer = ""
                list yx = null
                list yx = L.$x L.$y
                strings vnames = varnames(yx)

                outfile --buffer=buffer
                    write_labels(vnames[2], vnames[1], self.fontsize)
                    factorized_centroids(yx, self)
                    if y_counter > 2  # show key only for 1st pairplot
                        printf "set nokey\n"
                    endif
                    write_plot_cmd(self)
                    write_plot_data(yx, self)
                end outfile

                BUFFER += buffer
            endif
        endloop

        if self.type == "row" || self.type == "column"
            break
        endif
    endloop

    set force_decpoint off

    BUFFER += sprintf("unset multiplot")

    return BUFFER
end function


function string write_plot_cmd_and_data_tri (const list L,
                                             const bundle self)
    /* For self.type=="triangle" case */

    string BUFFER = ""
    set force_decpoint on

    # 1) Loop over all possible combinations
    # -> Each one starts with a new 'plot' cmd
    # 2) For each combination, consider the n_factors

    scalar y_counter = 0

    loop foreach y L -q			# Row dimension
        y_counter++

        scalar x_counter = 0

        loop foreach x L -q		# Column dimension
            if y_counter == 1
                break
            endif

            x_counter++

            if varname(L.$y) != varname(L.$x)
                string buffer = ""
                list yx = null
                list yx = L.$x L.$y
                strings vnames = varnames(yx)

                if y_counter > x_counter
                    outfile --buffer=buffer
                        write_labels(vnames[2], vnames[1], self.fontsize)
                        factorized_centroids(yx, self)
                        if y_counter > 2  # show key only for 1st pairplot
                            printf "set nokey\n"
                        endif
                        write_plot_cmd(self)
                        write_plot_data(yx, self)
                    end outfile
                else
                    buffer = sprintf("set multiplot next\n")
                endif

                BUFFER += buffer
            endif
        endloop						# end loop over x
    endloop							# end loop over y
    set force_decpoint off

    BUFFER += sprintf("unset multiplot")

    return BUFFER
end function


function void factorized_centroids (const list yx, bundle self)
    /*
    This function calculates and writes the centroids for each factor of a given list of variables. The function loops over the factors, restricts the sample to the observations where the factor series equals the current factor value, and then calls the 'write_centroids' function to calculate and write the centroids.

    Parameters:
    yx: A list of variables for which the centroids are to be calculated.
    self: A bundle containing various options for the function. It should have the following fields:
        - 'n_factors': The number of factors.
        - 'factor_series': The series of factors.
        - 'factor_values': The values of the factors.
        - 'ith_factor': The current factor in the loop.

    The function does not return anything. It modifies the 'self' bundle by setting the 'ith_factor' field to the current factor in the loop.

    Note: This function assumes that the 'write_centroids' function is defined in the same scope.
*/
    loop i=1..self.n_factors -q
        smpl full
        if self.n_factors > 1
            smpl self.factor_series == self.factor_values[i] --restrict
        endif
        smpl --no-missing yx

        scalar self.ith_factor = i
        write_centroids(yx, self)
    endloop
end function


function void write_centroids (const list yx, const bundle self)
    /*
    This function calculates and writes the centroids for a given list of variables. The type of centroid (mean or median) is determined by the 'centroid' field in the 'self' bundle. If the 'centroid' field is set to 'none', the function does nothing.

    Parameters:
    yx: A list of variables for which the centroids are to be calculated.
    self: A bundle containing various options for the function. It should have the following fields:
        - 'centroid': A string that determines the type of centroid to calculate. It can be 'mean', 'median', or 'none'.
        - 'centroid_label': A boolean that determines whether to label the centroids. If true, the centroids are labeled with their type ('Mean' or 'Median'). If false, no label is added.
        - 'centroid_pointsize': An integer that determines the point size of the centroids in the plot.

    The function calculates the centroids by looping over the variables in 'yx' and calculating their mean or median, depending on the 'centroid' field in 'self'. The centroids are then written to the plot with a label (if 'centroid_label' is true) and a specified point size ('centroid_pointsize'). The centroids are colored red.

    Note: This function does not return anything.
*/
    if self.centroid != "none"
        matrix centroids = mshape(NA, 2, 1)     # x,y

        loop loop foreach i yx
            if self.centroid == "mean"
                centroids[i] = mean(yx.$i)
            elif self.centroid == "median"
                centroids[i] = median(yx.$i)
            endif
        endloop

        if self.centroid == "mean"
            string label = self.centroid_label == TRUE ? "Mean" : ""
        elif self.centroid == "median"
            string label = self.centroid_label == TRUE ? "Median" : ""
        endif

        if self.n_factors == 1
            string color = "FF0000"     # color code "red"
        else
            string color = get_color_definitions()[self.ith_factor]
        endif

        # Draw some symbol for the i-th centroid
        printf "set label %d \"%s\" at %g,%g point ps %d pt %d lw %d",
            self.ith_factor, label, centroids[1], centroids[2],
            self.centroid_pointsize, self.ith_factor, self.centroid_linewidth
        # Color of centroid equals the color of the i-th factor
        printf " lc rgb '#%s' front\n", color
    endif
end function


function void write_labels (const string yname,
                            const string xname,
                            const int fontsize)
    printf "set ylabel '%s' font ',%d'\n", yname, fontsize
    printf "set xlabel '%s' font ',%d'\n", xname, fontsize
end function


function void write_plot_data (const list yx, const bundle self)
    /* Write data for a single subplot. */

    strings S = array(0)

    loop i=1..self.n_factors -q
        smpl full
        if self.n_factors > 1
            smpl self.factor_series == self.factor_values[i] --restrict
        endif
        smpl --no-missing yx

        matrix m = {yx}   # TODO: for huge data, this may become a bottleneck
        cnameset(m, "")   # avoid printing variable names to the gp-file
        printf "%12.8g", m
        printf "\ne\n"
    endloop
end function


function void print_using_cmd (const bundle self, const int idx)
    /* Print gnuplot data details. */

    printf "'-' using 1:2 w %s", self.plot_type

    if self.plot_type == "points"
         printf " pt %d", self.pointtype[idx]
    endif
end function


function void print_plot_title (const bundle self, const int idx)
    /* Print title string. */

    if inbundle(self, "factor_str_values")
        # If factor series comprises strings, these are used
        printf " title '%s'", self.factor_str_values[idx]
    else
        if self.n_factors == 1
            print " title ''"
        else
            printf " title 'F=%d'", self.factor_values[idx]
        endif
    endif
end function


function void write_plot_cmd (const bundle self)
    /* Compile gnuplot initial commands. */

    printf "plot \\\n"

    loop i=1..self.n_factors
        print_using_cmd(self, $i)
        print_plot_title(self, $i)

        if i < self.n_factors
            printf ", \\\n"
        else
            printf "\n"
        endif
    endloop
end function


function string set_offsets (const scalar offset_level)
    /* Write settings for offsets
    return: string, offsets parameters */

    string r = "set offsets "

    loop i=1..4 -q
        r += sprintf("%.2f", offset_level)
        r += i < 4 ? ", " : ""
    endloop

    return r
end function


function string write_options (const bundle self)
    /* Write gnuplot options to buffer and return as string. */

    set force_decpoint on

    string buffer

    outfile --buffer=buffer
        printf "%s\n", set_offsets(self.offset_level)

        if self.with_key
            printf "set key %s font ',%d'\n", self.key_position,
                self.key_fontsize
        else
            printf "set nokey\n"
        endif
        if self.tics
            printf "set xtics font ',%d'\n", self.tics_fontsize
            printf "set ytics font ',%d' \n", self.tics_fontsize
        else
            printf "set noxtics\n"
            printf "set noytics\n"
        endif

        if self.grid
            printf "set style line 12 lc rgb '#808080' lt 0 lw 1\n"
            printf "set grid ls 12\n"
        endif

        printf "set pointsize %.2f\n", self.pointsize
    end outfile

    set force_decpoint off

    return buffer
end function


function strings get_color_definitions (void)
    /* Put your own definitions here. */

    /*
    return defarray(\
                    "C41E3A", \
                    "4682B4", \
                    "FFBF00", \
                    "ff0000", \
                    "00cc00", \
                    "8faab3", \
                    "0000ff", \
                    "bf25b2", \
                    "ffa500"\
                    )
    */

    # "dark2" palette
    return defarray(\
                    "1B9E77",\
                    "D95F02",\
                    "7570B3",\
                    "E7298A",\
                    "66A61E",\
                    "E6AB02",\
                    "A6761D",\
                    "666666",\
                    "C41E3A",\
                    "4682B4",\
                    "FFBF00",\
                    "ff0000",\
                    "00cc00",\
                    "8faab3",\
                    "0000ff",\
                    "bf25b2",\
                    "ffa500"\
                    )
end function


function string write_linetype (const int n_variables[1::],
                                const strings color_definitions,
                                const int transparency_level[0:255:0])
    /* Print linetype commands. */

    string linetype_out = ""
    scalar counter = 1

    outfile --buffer=linetype_out
        loop i=1..n_variables -q
            printf "set linetype %d lc rgb '#%2x%s'\n",
              $i, transparency_level, color_definitions[counter]

            # Repeat colors if needed
            counter = (counter == nelem(color_definitions)) ? 1 : (counter + 1)
        endloop
    end outfile

    return linetype_out
end function
